#!/bin/zsh
#
# Only including a shebang to trigger editors shell syntax highlighting
#
# Copyright 2006-2020 Joseph Block <jpb@unixorn.net>
#
# BSD licensed, see LICENSE.txt
#
# If you want to customize these, the best thing to do is override them
# with a shell fragment in ~/.zshrc.d, then you don't have to maintain
# your own fork of the quickstart kit

# Add some quickstart toggle functions
zsh-quickstart-select-bullet-train() {
  touch ~/.zsh-quickstart-use-bullet-train
  rm -f ~/.zgen/init.zsh
}

zsh-quickstart-select-powerlevel10k() {
  rm -f ~/.zsh-quickstart-use-bullet-train
  rm -f ~/.zgen/init.zsh
}

zsh-quickstart-disable-omz-plugins() {
  touch ~/.zsh-quickstart-no-omz
  rm -f ~/.zgen/init.zsh
}

zsh-quickstart-enable-omz-plugins() {
  rm -f ~/.zsh-quickstart-no-omz
  rm -f ~/.zgen/init.zsh
}

exists() {
  if (( $+commands[$1] )); then return 0; else return 1; fi
}

# from cads@ooyala.com
ff() {
  find . -type f -iname '*'$@'*' -ls
}

hgrep_full() {
  history | egrep --color -i "$@"
}

# easier to type, leaving hgrep_full for backwards compatibility
hgrep-full() {
  hgrep_full "$@"
}

envgrep() {
  printenv | grep -i "$@"
}

# From Dan Ryan's blog - http://danryan.co/using-antigen-for-zsh.html
man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
      man "$@"
}

# From commandlinefu.com
watch() { t=$1; shift; while test :; do clear; date=$(date); echo -e "Every $ts: $@ \t\t\t\t $date"; $@; sleep $t; done }

# scp file to machine you're sshing into this machine from
mecp() {
  scp "$@" ${SSH_CLIENT%% *}:~/Downloads/;
}

calc() {
  awk "BEGIN{ print $* }" ;
}

get_nr_jobs() {
  jobs | wc -l
}

get_load() {
  uptime | awk '{print $11}' | tr ',' ' '
}

mtr_url() {
  host=$(ruby -ruri -e "puts (URI.parse('$1').host or '$1')")
  sudo mtr -t $host
}

fix_tmux_ssh_agent() {
  for key in SSH_AUTH_SOCK SSH_CONNECTION SSH_CLIENT; do
    if (tmux show-environment | grep "^${key}" > /dev/null); then
      value=$(tmux show-environment | grep "^${key}" | sed -e "s/^[A-Z_]*=//")
      export ${key}="${value}"
    fi
  done
}

# Probe a /24 for hosts
scan24() {
  nmap -sP ${1}/24
}

# Netjoin - Block until a network connection is obtained.
# Originally from https://github.com/bamos/dotfiles/blob/master/.funcs
nj() {
  while true; do
    ping -c 1 8.8.8.8 &> /dev/null && break
    sleep 1
  done
}

# lists zombie processes
zombie() {
  ps aux | awk '{if ($8=="Z") { print $2 }}'
}
alias zombies=zombie

# get the content type of an http resource
# from https://github.com/jleclanche/dotfiles/blob/master/.zshrc
htmime() {
  if [[ -z $1 ]]; then
    print "USAGE: htmime <URL>"
    return 1
  fi
  mime=$(curl -sIX HEAD $1 | sed -nr "s/Content-Type: (.+)/\1/p")
  print $mime
}

# Start an HTTP server from a directory, optionally specifying the port
httpserver() {
  local port="${1:-8000}";
  sleep 1 && open "http://localhost:${port}/" &
  # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
  # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
  python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

# Honor old .zsh_functions.local customizations, but print depecation warning.
if [ -f ~/.zsh_functions.local ]; then
  source .zsh_functions.local
  echo ".zsh_functions.local is deprecated. Make entries in ~/.zshrc.d instead."
fi
